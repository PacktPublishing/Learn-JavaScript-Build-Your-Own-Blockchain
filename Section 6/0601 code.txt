// Section 6, video 1 (not runnable, needs Section 6, video 2 edits)

// this import brings the crypto-js library into the context of this file
const SHA256 = require('crypto-js/sha256');


class Transaction {
    constructor( timestamp, payerAddr, payeeAddr, amount) {
        this.timestamp = timestamp;
        this.payerAddr = payerAddr;
        this.payeeAddr = payeeAddr;
        this.amount = amount;
    }
}

// a classes are blueprints for objects that we need
class Block {
    // the constructor always runs when an object of this class is instantiated
    constructor( timestamp, txns, previousHash ) {
        this.timestamp = timestamp;
        this.txns = txns;
        this.previousHash = previousHash;
        this.nonce = 0;
        this.hash = this.calculateHash();
    }
    
    //uses crypto-js's SHA256 encryption to create a has of our block data
    calculateHash() {
        return SHA256( this.index + this.previousHash + this.timestamp + JSON.stringify( this.data) + this.nonce ).toString();
    }   
    
    mineBlock( difficulty ) {
        let count = 0;
        while( this.hash.substring( 0, difficulty) !== Array( difficulty + 1 ).join( "0" ) ) {
            this.nonce++;  // '++' is the JavaScript incrementor operator (adds 1 to the nonce integer)
            count++;
            this.hash = this.calculateHash();
        }
        
        console.log( "Block successfully hashed: (" + count + " iterations).  Hash: " + this.hash );
    }
}

class Blockchain {
    constructor() {
        this.chain = [ this.createGenesisBlock() ];
        this.difficulty = 4;
        this.unminedTxns = [];
        this.miningReward = 50;
    }
    
    createGenesisBlock() {
        return new Block( 0, "15/01/2008", "Genesis Block", "0" );
    }
    
    getLatestBlock() {
        return this.chain[ this.chain.length - 1 ];
    }
    
    mineCurrentBlock( minerAddr ) {
        let block = new Block( Date.now(), this.unminedTxns, this.getLatestBlock().hash );
        block.mineBlock( this.difficulty );
        
        console.log( "Current Block successfully mined..." );
        this.chain.push( block );
        
        this.unminedTxns = [
            new Transaction( Date.now(), "mint", minerAddr, this.miningReward )
        ];
    }
    
    isChainValid() {
        for ( let i = 1; i < this.chain.length; i++ ) {
            const currentBlock = this.chain[ i ];
            const previousBlock = this.chain[ i - 1 ];
            
            // validate data integrity
            if ( currentBlock.hash !== currentBlock.calculateHash() ) {
                return false;
            }
            
            // validate hash chain link
            if ( currentBlock.previousHash !== previousBlock.hash ) {
               return false;
            }
        }
        
        // all good, no manipulated data or bad links
        return true;
    }
}


// run the above code by instantiating a new 
// blockchain object and adding 2 new blocks
let demoChain = new Blockchain();

console.log( "Starting to mine a new block..." );
demoChain.addBlock( new Block( 1, "15/02/2018", {
    amount: 10
}) );

console.log( "Starting to mine a new block..." );
demoChain.addBlock( new Block( 2, "16/02/2018", {
    amount: 25
}) );
